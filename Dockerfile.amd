# 빌드 스테이지
FROM --platform=linux/amd64 rust:1.80 as builder

# 빌드 인수 정의
ARG GIT_TAG

RUN apt-get update && apt-get install -y git

# Rust 타겟 추가
RUN rustup target add x86_64-unknown-linux-gnu

# WASM 타겟 추가
RUN rustup target add wasm32-unknown-unknown

# 소스 코드 클론 및 특정 태그 체크아웃
RUN git clone https://github.com/dsrvlabs/cargo-stylus.git
WORKDIR /cargo-stylus
RUN git checkout ${GIT_TAG}

# 릴리즈 빌드 실행 (디버그 정보 제외)
ENV RUSTFLAGS="-C debuginfo=0"
RUN cargo fetch
RUN cargo build --release --manifest-path main/Cargo.toml

# 최종 이미지 스테이지
FROM --platform=linux/amd64 rust:1.80

# 빌드 스테이지의 rustup과 cargo 설치 복사
COPY --from=builder /usr/local/rustup /usr/local/rustup
COPY --from=builder /usr/local/cargo /usr/local/cargo

# 환경 변수 설정
ENV RUSTUP_HOME=/usr/local/rustup \
    CARGO_HOME=/usr/local/cargo \
    PATH=$CARGO_HOME/bin:$RUSTUP_HOME/bin:$PATH

# 빌드된 실행 파일을 최종 이미지로 복사
COPY --from=builder /cargo-stylus/target/release/cargo-stylus /usr/local/bin/cargo-stylus

# 컨테이너에서 사용할 작업 디렉토리 설정
WORKDIR /workspace

# 컨테이너가 실행될 때 기본 명령을 쉘로 유지 (필요에 따라 변경)
CMD ["/bin/sh"]